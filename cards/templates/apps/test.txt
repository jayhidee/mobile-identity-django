
class DownloadCard(APIView):
# aqrcode-7.3.1uthentication_classes = (authentication.TokenAuthentication,)
# permission_classes = (permissions.IsAuthenticated,)

def post(self, request):
    cardz = Cards.objects.filter(user_id=request.user, card_id=request.data['card_id']).select_related(
        'issuing_organization').values_list('card_id', 'date_expiring', 'date_issued', 'id', 'issuing_organization__name', 'issuing_organization__images')

    d = list(cardz)
    findOff = CardsOffline.objects.filter(
        card_id=d[0][3], deleted=False, user_id=request.user)

    if findOff:
        data = CardOfflineSerializer(findOff, many=True)
        return Response({"message": data.data})
    else:
        id_num = d[0][0]
        name = request.user.get_full_name()
        iss_org = d[0][4]

        image = """
                    <html>
                        <head>



                            <!--Fontawesome-->
                            <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.1/css/all.css" integrity="sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf" crossorigin="anonymous">

                            <!-- Bootstrap core CSS -->
                            <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
                            <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
                            <style>
                            # cs{
                                width: 40vw;
                                height: auto;
                                margin: auto;
                                background-image: url(https://res.cloudinary.com/gims/image/upload/v1639396599/int-pass_ud28p9.png);
                                background-position: center;
                                background-repeat: no-repeat;
                                background-size: cover;
                            }
                            body{
                                background: transparent;
                            }
                            </style>
                        </head>

                        <body>
                            <div class="card p-5 m-auto" id="cs">
                                <div class="card-body container">
                                <div class="row m-auto">
                                    <span class="col-2">
                                    jj
                                    </span>
                                    <span class="col-10">
                                    <h3><strong>Federal Republic of Nigeria</strong></h3>
                                    </span>
                                </div>
                                <div class="row py-5 m-auto">
                                    <div class="col-4">
                                    <img class="img-fluid" src="https://cdn.pixabay.com/photo/2015/03/04/22/35/head-659652_960_720.png">
                                    <span></span>
                                    </div>
                                    <div class="col-8 my-4">
                                    <h4><strong>ID:</strong>  %s</h4>
                                    <h4><strong>Name:</strong> %s</h4>
                                    <h4><strong>Age:</strong>  40</h4>
                                    <h4><strong>Address:</strong>  This a test address that can change</h4>
                                    <h4><strong>Sex:</strong>  M</h4>
                                    </div>
                                </div>
                                <div class="row m-auto">
                                    <span class="col-12 text-center">
                                    <i class=""><small>%s<br>Federal Republic of Nigeria</small></i>
                                    </span>
                                </div>
                            </div>
                            </div>



                            <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
                            <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"></script>
                            <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
                        </body>
                    </html>

                """ % (id_num, name, iss_org)
        HCTI_API_ENDPOINT = "https://hcti.io/v1/image"
        # Retrieve these from https://htmlcsstoimage.com/dashboard
        HCTI_API_USER_ID = '64046e10-8be7-4e35-b6ea-180706dd73fd'
        HCTI_API_KEY = '7995399a-e729-4287-be06-b7a3b78e0a2b'

        data = {'html': image,
                'css': ".box { color: white; background: transparent; padding: 10px; font-family: Roboto }#cs{ width: 40vw; height: auto;  margin: auto; background-size: cover; background-image: url(https://res.cloudinary.com/gims/image/upload/v1639396599/int-pass_ud28p9.png); background-position: center; background-repeat: no-repeat; }",
                'google_fonts': "Roboto"}
        dd = requests.post(url=HCTI_API_ENDPOINT, data=data,
                           auth=(HCTI_API_USER_ID, HCTI_API_KEY))

        CardsOffline.objects.create(
            card_id=d[0][3], user_id=request.user, image=dd.json()['url'], last_download=datetime.datetime.now(), created=True, deleted=False)

        return Response({"download": dd.json()['url']})

def get(self, request):
    card = CardsOffline.objects.filter(user_id=request.user)
    data = CardOfflineSerializer(card, many=True)
    if not card:
        return Response({"message": "No offline card available"})
    else:
        return Response({"message": data.data})


class DownloaddCard(APIView):
authentication_classes = (authentication.TokenAuthentication,)
permission_classes = (permissions.IsAuthenticated,)

def post(self, request):

    card = CardsOffline.objects.get(
        user_id=request.user, id=request.data['card_id'])
    data = CardOfflineSerializer(card, many=True)
    return Response({"message": data.data})


class DownloadDeleteCard(APIView):
authentication_classes = (authentication.TokenAuthentication,)
permission_classes = (permissions.IsAuthenticated,)

def get(self, request, id):
    card = CardsOffline.objects.filter(
        user_id=request.user, deleted=False, id=id)
    data = CardOfflineSerializer(card, many=True)
    if not card:
        return Response({"message": "card has been deleted"})
    else:
        return Response({"message": data.data})

def delete(self, request, id):
    pass
